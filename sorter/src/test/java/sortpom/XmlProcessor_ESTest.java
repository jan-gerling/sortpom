/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 13 11:28:23 GMT 2019
 */

package sortpom;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.CharConversionException;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.net.MalformedURLException;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jdom.Document;
import org.junit.runner.RunWith;
import sortpom.XmlProcessor;
import sortpom.util.FileUtil;
import sortpom.wrapper.WrapperFactoryImpl;
import sortpom.wrapper.operation.WrapperFactory;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XmlProcessor_ESTest extends XmlProcessor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      WrapperFactoryImpl wrapperFactoryImpl0 = new WrapperFactoryImpl(fileUtil0);
      XmlProcessor xmlProcessor0 = new XmlProcessor(wrapperFactoryImpl0);
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 58, (-1));
      try { 
        xmlProcessor0.setOriginalXml(byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1: Premature end of file.
         //
         verifyException("org.jdom.input.SAXBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor((WrapperFactory) null);
      try { 
        xmlProcessor0.setOriginalXml((InputStream) null);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor((WrapperFactory) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        xmlProcessor0.setOriginalXml(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      WrapperFactoryImpl wrapperFactoryImpl0 = new WrapperFactoryImpl(fileUtil0);
      XmlProcessor xmlProcessor0 = new XmlProcessor(wrapperFactoryImpl0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-104);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      try { 
        xmlProcessor0.setOriginalXml(dataInputStream0);
        fail("Expecting exception: CharConversionException");
      
      } catch(CharConversionException e) {
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      WrapperFactoryImpl wrapperFactoryImpl0 = new WrapperFactoryImpl(fileUtil0);
      XmlProcessor xmlProcessor0 = new XmlProcessor(wrapperFactoryImpl0);
      // Undeclared exception!
      try { 
        xmlProcessor0.isXmlOrdered();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sortpom.XmlProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      WrapperFactoryImpl wrapperFactoryImpl0 = new WrapperFactoryImpl(fileUtil0);
      XmlProcessor xmlProcessor0 = new XmlProcessor(wrapperFactoryImpl0);
      Document document0 = xmlProcessor0.getNewDocument();
      assertNull(document0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      WrapperFactoryImpl wrapperFactoryImpl0 = new WrapperFactoryImpl(fileUtil0);
      XmlProcessor xmlProcessor0 = new XmlProcessor(wrapperFactoryImpl0);
      // Undeclared exception!
      try { 
        xmlProcessor0.sortXml();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sortpom.XmlProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      WrapperFactoryImpl wrapperFactoryImpl0 = new WrapperFactoryImpl(fileUtil0);
      XmlProcessor xmlProcessor0 = new XmlProcessor(wrapperFactoryImpl0);
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 1);
      // Undeclared exception!
      try { 
        xmlProcessor0.setOriginalXml(bufferedInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }
}
