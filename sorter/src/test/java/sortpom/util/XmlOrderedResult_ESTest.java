/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 13 11:26:33 GMT 2019
 */

package sortpom.util;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sortpom.util.XmlOrderedResult;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XmlOrderedResult_ESTest extends XmlOrderedResult_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      XmlOrderedResult xmlOrderedResult0 = XmlOrderedResult.textContentDiffers("", "", "'ne_C");
      assertFalse(xmlOrderedResult0.isOrdered());
      assertEquals("The xml element <>'ne_C</> should be placed before <></>", xmlOrderedResult0.getErrorMessage());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      XmlOrderedResult xmlOrderedResult0 = XmlOrderedResult.textContentDiffers("sortpom.util.XmlOrderedResult", "=Ok>d.7q6!", "sortpom.util.XmlOrderedResult");
      assertFalse(xmlOrderedResult0.isOrdered());
      assertEquals("The xml element <sortpom.util.XmlOrderedResult>sortpom.util.XmlOrderedResult</sortpom.util.XmlOrderedResult> should be placed before <sortpom.util.XmlOrderedResult>=Ok>d.7q6!</sortpom.util.XmlOrderedResult>", xmlOrderedResult0.getErrorMessage());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      XmlOrderedResult xmlOrderedResult0 = XmlOrderedResult.childElementDiffers((String) null, (-490), (-1463));
      assertEquals("The xml element <null> with -1463 child elements should be placed before element <null> with -490 child elements", xmlOrderedResult0.getErrorMessage());
      assertFalse(xmlOrderedResult0.isOrdered());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      XmlOrderedResult xmlOrderedResult0 = XmlOrderedResult.nameDiffers("CC#g3Q40['wBY,W", "");
      assertEquals("The xml element <> should be placed before <CC#g3Q40['wBY,W>", xmlOrderedResult0.getErrorMessage());
      assertFalse(xmlOrderedResult0.isOrdered());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      XmlOrderedResult xmlOrderedResult0 = XmlOrderedResult.ordered();
      boolean boolean0 = xmlOrderedResult0.isOrdered();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      XmlOrderedResult xmlOrderedResult0 = XmlOrderedResult.nameDiffers("h4u.SDO=y,=29C>", "h4u.SDO=y,=29C>");
      String string0 = xmlOrderedResult0.getErrorMessage();
      assertFalse(xmlOrderedResult0.isOrdered());
      assertEquals("The xml element <h4u.SDO=y,=29C>> should be placed before <h4u.SDO=y,=29C>>", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      XmlOrderedResult xmlOrderedResult0 = XmlOrderedResult.ordered();
      xmlOrderedResult0.getErrorMessage();
      assertTrue(xmlOrderedResult0.isOrdered());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      XmlOrderedResult xmlOrderedResult0 = XmlOrderedResult.nameDiffers("h4u.SDO=y,=29C>", "h4u.SDO=y,=29C>");
      boolean boolean0 = xmlOrderedResult0.isOrdered();
      assertFalse(boolean0);
      assertEquals("The xml element <h4u.SDO=y,=29C>> should be placed before <h4u.SDO=y,=29C>>", xmlOrderedResult0.getErrorMessage());
  }
}
