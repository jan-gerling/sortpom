/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 13 11:10:02 GMT 2019
 */

package sortpom.processinstruction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import sortpom.logger.SortPomLogger;
import sortpom.processinstruction.XmlProcessingInstructionParser;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XmlProcessingInstructionParser_ESTest extends XmlProcessingInstructionParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      XmlProcessingInstructionParser xmlProcessingInstructionParser0 = new XmlProcessingInstructionParser();
      String string0 = xmlProcessingInstructionParser0.revertIgnoredSections((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      XmlProcessingInstructionParser xmlProcessingInstructionParser0 = new XmlProcessingInstructionParser();
      String string0 = xmlProcessingInstructionParser0.revertIgnoredSections("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      XmlProcessingInstructionParser xmlProcessingInstructionParser0 = new XmlProcessingInstructionParser();
      xmlProcessingInstructionParser0.scanForIgnoredSections("_S;,i,oguKAH,!<");
      String string0 = xmlProcessingInstructionParser0.replaceIgnoredSections();
      assertEquals("_S;,i,oguKAH,!<", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      XmlProcessingInstructionParser xmlProcessingInstructionParser0 = new XmlProcessingInstructionParser();
      xmlProcessingInstructionParser0.scanForIgnoredSections("");
      String string0 = xmlProcessingInstructionParser0.replaceIgnoredSections();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      XmlProcessingInstructionParser xmlProcessingInstructionParser0 = new XmlProcessingInstructionParser();
      // Undeclared exception!
      try { 
        xmlProcessingInstructionParser0.scanForIgnoredSections((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      XmlProcessingInstructionParser xmlProcessingInstructionParser0 = new XmlProcessingInstructionParser();
      String string0 = xmlProcessingInstructionParser0.revertIgnoredSections("i");
      assertEquals("i", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      XmlProcessingInstructionParser xmlProcessingInstructionParser0 = new XmlProcessingInstructionParser();
      String string0 = xmlProcessingInstructionParser0.replaceIgnoredSections();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      XmlProcessingInstructionParser xmlProcessingInstructionParser0 = new XmlProcessingInstructionParser();
      SortPomLogger sortPomLogger0 = mock(SortPomLogger.class, new ViolatedAssumptionAnswer());
      xmlProcessingInstructionParser0.setup(sortPomLogger0);
      assertFalse(xmlProcessingInstructionParser0.existsIgnoredSections());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      XmlProcessingInstructionParser xmlProcessingInstructionParser0 = new XmlProcessingInstructionParser();
      boolean boolean0 = xmlProcessingInstructionParser0.existsIgnoredSections();
      assertFalse(boolean0);
  }
}
