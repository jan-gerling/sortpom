/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 13 11:33:02 GMT 2019
 */

package sortpom.wrapper.content;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jdom.CDATA;
import org.jdom.Comment;
import org.jdom.DocType;
import org.jdom.Element;
import org.junit.runner.RunWith;
import sortpom.wrapper.content.UnsortedWrapper;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UnsortedWrapper_ESTest extends UnsortedWrapper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      UnsortedWrapper<Element> unsortedWrapper0 = new UnsortedWrapper<Element>(element0);
      boolean boolean0 = unsortedWrapper0.isContentElement();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CDATA cDATA0 = mock(CDATA.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(cDATA0).toString();
      UnsortedWrapper<CDATA> unsortedWrapper0 = new UnsortedWrapper<CDATA>(cDATA0);
      CDATA cDATA1 = unsortedWrapper0.getContent();
      assertNull(cDATA1.getText());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      UnsortedWrapper<Comment> unsortedWrapper0 = new UnsortedWrapper<Comment>((Comment) null);
      String string0 = unsortedWrapper0.toString();
      assertEquals("UnsortedWrapper{content=null}", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Comment comment0 = mock(Comment.class, new ViolatedAssumptionAnswer());
      UnsortedWrapper<Comment> unsortedWrapper0 = new UnsortedWrapper<Comment>(comment0);
      boolean boolean0 = unsortedWrapper0.isContentElement();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      UnsortedWrapper<Comment> unsortedWrapper0 = new UnsortedWrapper<Comment>((Comment) null);
      Comment comment0 = unsortedWrapper0.getContent();
      assertNull(comment0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Comment comment0 = mock(Comment.class, new ViolatedAssumptionAnswer());
      UnsortedWrapper<Comment> unsortedWrapper0 = new UnsortedWrapper<Comment>(comment0);
      // Undeclared exception!
      try { 
        unsortedWrapper0.isBefore(unsortedWrapper0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot be sorted
         //
         verifyException("sortpom.wrapper.content.UnsortedWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DocType docType0 = mock(DocType.class, new ViolatedAssumptionAnswer());
      UnsortedWrapper<DocType> unsortedWrapper0 = new UnsortedWrapper<DocType>(docType0);
      boolean boolean0 = unsortedWrapper0.isSortable();
      assertFalse(boolean0);
  }
}
