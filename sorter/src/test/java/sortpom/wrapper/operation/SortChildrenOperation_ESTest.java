/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 13 11:01:35 GMT 2019
 */

package sortpom.wrapper.operation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jdom.Element;
import org.junit.runner.RunWith;
import sortpom.wrapper.content.PluginSortedWrapper;
import sortpom.wrapper.content.UnsortedWrapper;
import sortpom.wrapper.operation.HierarchyWrapper;
import sortpom.wrapper.operation.SortChildrenOperation;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SortChildrenOperation_ESTest extends SortChildrenOperation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SortChildrenOperation sortChildrenOperation0 = new SortChildrenOperation();
      // Undeclared exception!
      try { 
        sortChildrenOperation0.manipulateChildElements((List<HierarchyWrapper>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sortpom.wrapper.operation.SortChildrenOperation", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SortChildrenOperation sortChildrenOperation0 = new SortChildrenOperation();
      LinkedList<HierarchyWrapper> linkedList0 = new LinkedList<HierarchyWrapper>();
      PluginSortedWrapper pluginSortedWrapper0 = new PluginSortedWrapper((Element) null, 51);
      HierarchyWrapper hierarchyWrapper0 = new HierarchyWrapper(pluginSortedWrapper0);
      linkedList0.add(hierarchyWrapper0);
      linkedList0.add(hierarchyWrapper0);
      sortChildrenOperation0.manipulateChildElements(linkedList0);
      assertTrue(linkedList0.contains(hierarchyWrapper0));
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SortChildrenOperation sortChildrenOperation0 = new SortChildrenOperation();
      LinkedList<HierarchyWrapper> linkedList0 = new LinkedList<HierarchyWrapper>();
      UnsortedWrapper<Element> unsortedWrapper0 = new UnsortedWrapper<Element>((Element) null);
      HierarchyWrapper hierarchyWrapper0 = new HierarchyWrapper(unsortedWrapper0);
      linkedList0.addFirst(hierarchyWrapper0);
      PluginSortedWrapper pluginSortedWrapper0 = new PluginSortedWrapper((Element) null, 51);
      HierarchyWrapper hierarchyWrapper1 = new HierarchyWrapper(pluginSortedWrapper0);
      linkedList0.add(hierarchyWrapper1);
      sortChildrenOperation0.manipulateChildElements(linkedList0);
      assertTrue(linkedList0.contains(hierarchyWrapper0));
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<HierarchyWrapper> linkedList0 = new LinkedList<HierarchyWrapper>();
      Element element0 = new Element("T", "T");
      UnsortedWrapper<Element> unsortedWrapper0 = new UnsortedWrapper<Element>(element0);
      HierarchyWrapper hierarchyWrapper0 = new HierarchyWrapper(unsortedWrapper0);
      linkedList0.add(hierarchyWrapper0);
      SortChildrenOperation sortChildrenOperation0 = new SortChildrenOperation();
      sortChildrenOperation0.manipulateChildElements(linkedList0);
      assertEquals(1, linkedList0.size());
  }
}
