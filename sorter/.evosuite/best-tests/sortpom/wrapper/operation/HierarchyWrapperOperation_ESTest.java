/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 13 11:30:58 GMT 2019
 */

package sortpom.wrapper.operation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jdom.Content;
import org.jdom.Element;
import org.junit.runner.RunWith;
import sortpom.wrapper.content.SingleNewlineInTextWrapper;
import sortpom.wrapper.content.UnsortedWrapper;
import sortpom.wrapper.content.Wrapper;
import sortpom.wrapper.operation.DetachOperation;
import sortpom.wrapper.operation.GetContentStructureOperation;
import sortpom.wrapper.operation.HierarchyWrapper;
import sortpom.wrapper.operation.HierarchyWrapperOperation;
import sortpom.wrapper.operation.SortChildrenOperation;
import sortpom.wrapper.operation.ToStringOperation;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HierarchyWrapperOperation_ESTest extends HierarchyWrapperOperation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DetachOperation detachOperation0 = new DetachOperation();
      SingleNewlineInTextWrapper singleNewlineInTextWrapper0 = SingleNewlineInTextWrapper.INSTANCE;
      // Undeclared exception!
      try { 
        detachOperation0.processOtherContent(singleNewlineInTextWrapper0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sortpom.wrapper.content.SingleNewlineInTextWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ToStringOperation toStringOperation0 = new ToStringOperation();
      // Undeclared exception!
      try { 
        toStringOperation0.processOtherContent((Wrapper<Content>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sortpom.wrapper.operation.ToStringOperation", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      GetContentStructureOperation getContentStructureOperation0 = new GetContentStructureOperation();
      // Undeclared exception!
      try { 
        getContentStructureOperation0.processElement((Wrapper<Element>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sortpom.wrapper.operation.GetContentStructureOperation", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SortChildrenOperation sortChildrenOperation0 = new SortChildrenOperation();
      // Undeclared exception!
      try { 
        sortChildrenOperation0.manipulateChildElements((List<HierarchyWrapper>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sortpom.wrapper.operation.SortChildrenOperation", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DetachOperation detachOperation0 = new DetachOperation();
      LinkedList<HierarchyWrapper> linkedList0 = new LinkedList<HierarchyWrapper>();
      detachOperation0.manipulateChildElements(linkedList0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SortChildrenOperation sortChildrenOperation0 = new SortChildrenOperation();
      SingleNewlineInTextWrapper singleNewlineInTextWrapper0 = SingleNewlineInTextWrapper.INSTANCE;
      sortChildrenOperation0.processOtherContent(singleNewlineInTextWrapper0);
      assertEquals("SingleNewlineInTextWrapper", singleNewlineInTextWrapper0.toString());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DetachOperation detachOperation0 = new DetachOperation();
      detachOperation0.startOfProcess();
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DetachOperation detachOperation0 = new DetachOperation();
      detachOperation0.endOfProcess();
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DetachOperation detachOperation0 = new DetachOperation();
      HierarchyWrapperOperation hierarchyWrapperOperation0 = detachOperation0.createSubOperation();
      assertSame(detachOperation0, hierarchyWrapperOperation0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      SortChildrenOperation sortChildrenOperation0 = new SortChildrenOperation();
      Element element0 = new Element("v", "");
      UnsortedWrapper<Element> unsortedWrapper0 = new UnsortedWrapper<Element>(element0);
      sortChildrenOperation0.processElement(unsortedWrapper0);
      assertTrue(unsortedWrapper0.isContentElement());
  }
}
