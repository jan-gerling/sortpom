/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 13 11:21:59 GMT 2019
 */

package sortpom.wrapper.content;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jdom.Element;
import org.junit.runner.RunWith;
import sortpom.parameter.DependencySortOrder;
import sortpom.wrapper.content.ChildElementSorter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ChildElementSorter_ESTest extends ChildElementSorter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DependencySortOrder dependencySortOrder0 = new DependencySortOrder("CDATA section");
      LinkedList<Element> linkedList0 = new LinkedList<Element>();
      ChildElementSorter childElementSorter0 = new ChildElementSorter(dependencySortOrder0, linkedList0);
      ChildElementSorter childElementSorter1 = ChildElementSorter.EMPTY_SORTER;
      // Undeclared exception!
      try { 
        childElementSorter0.compareTo(childElementSorter1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DependencySortOrder dependencySortOrder0 = new DependencySortOrder("org.jdom.Text");
      ChildElementSorter childElementSorter0 = null;
      try {
        childElementSorter0 = new ChildElementSorter(dependencySortOrder0, (List<Element>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sortpom.wrapper.content.ChildElementSorter", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DependencySortOrder dependencySortOrder0 = new DependencySortOrder("scope");
      LinkedList<Element> linkedList0 = new LinkedList<Element>();
      ChildElementSorter childElementSorter0 = new ChildElementSorter(dependencySortOrder0, linkedList0);
      ChildElementSorter childElementSorter1 = ChildElementSorter.EMPTY_SORTER;
      boolean boolean0 = childElementSorter0.compareTo(childElementSorter1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DependencySortOrder dependencySortOrder0 = new DependencySortOrder("scPpe");
      LinkedList<Element> linkedList0 = new LinkedList<Element>();
      ChildElementSorter childElementSorter0 = new ChildElementSorter(dependencySortOrder0, linkedList0);
      boolean boolean0 = childElementSorter0.compareTo(childElementSorter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ChildElementSorter childElementSorter0 = ChildElementSorter.EMPTY_SORTER;
      String string0 = childElementSorter0.toString();
      assertEquals("ChildElementSorter{childElementTexts=[]}", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DependencySortOrder dependencySortOrder0 = new DependencySortOrder("scope");
      LinkedList<Element> linkedList0 = new LinkedList<Element>();
      ChildElementSorter childElementSorter0 = new ChildElementSorter(dependencySortOrder0, linkedList0);
      childElementSorter0.setEmptyPluginGroupIdValue("scope");
  }
}
