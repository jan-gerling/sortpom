/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 13 10:58:05 GMT 2019
 */

package sortpom.verify;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jdom.Content;
import org.jdom.Element;
import org.junit.runner.RunWith;
import sortpom.util.XmlOrderedResult;
import sortpom.verify.ElementComparator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ElementComparator_ESTest extends ElementComparator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Element element0 = new Element("a", "a", "a");
      Element element1 = new Element("a", "a");
      element0.addContent((Content) element1);
      ElementComparator elementComparator0 = new ElementComparator(element0, element1);
      XmlOrderedResult xmlOrderedResult0 = elementComparator0.isElementOrdered();
      assertEquals("The xml element <a> with 0 child elements should be placed before element <a> with 1 child elements", xmlOrderedResult0.getErrorMessage());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ElementComparator elementComparator0 = new ElementComparator((Element) null, (Element) null);
      // Undeclared exception!
      try { 
        elementComparator0.isElementOrdered();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sortpom.verify.ElementComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Element element0 = new Element("_QM", "_QM");
      Element element1 = new Element("_QM");
      element0.addContent((Content) element1);
      ElementComparator elementComparator0 = new ElementComparator(element0, element0);
      XmlOrderedResult xmlOrderedResult0 = elementComparator0.isElementOrdered();
      assertTrue(xmlOrderedResult0.isOrdered());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Element element0 = new Element("Rj", "Rj", "Rj");
      Element element1 = new Element("Rj", "Rj");
      Element element2 = new Element("Rj", "Rj");
      element1.setContent((Content) element2);
      element0.addContent((Content) element1);
      ElementComparator elementComparator0 = new ElementComparator(element1, element0);
      XmlOrderedResult xmlOrderedResult0 = elementComparator0.isElementOrdered();
      assertEquals("The xml element <Rj> with 1 child elements should be placed before element <Rj> with 0 child elements", xmlOrderedResult0.getErrorMessage());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Element element0 = new Element("a", "a");
      Element element1 = new Element("a", "a");
      element1.setText("a");
      ElementComparator elementComparator0 = new ElementComparator(element1, element0);
      XmlOrderedResult xmlOrderedResult0 = elementComparator0.isElementOrdered();
      assertEquals("The xml element <a></a> should be placed before <a>a</a>", xmlOrderedResult0.getErrorMessage());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Element element0 = new Element("n");
      Element element1 = new Element("o");
      ElementComparator elementComparator0 = new ElementComparator(element1, element0);
      XmlOrderedResult xmlOrderedResult0 = elementComparator0.isElementOrdered();
      assertFalse(xmlOrderedResult0.isOrdered());
  }
}
