/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 13 11:33:50 GMT 2019
 */

package sortpom.parameter;

import org.junit.Test;
import static org.junit.Assert.*;
import java.io.File;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sortpom.parameter.PluginParameters;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PluginParameters_ESTest extends PluginParameters_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PluginParameters.Builder pluginParameters_Builder0 = PluginParameters.builder();
      PluginParameters.Builder pluginParameters_Builder1 = pluginParameters_Builder0.setSortEntities("hxcoBxD}Ag5`lz", "hxcoBxD}Ag5`lz", true, false);
      assertSame(pluginParameters_Builder1, pluginParameters_Builder0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PluginParameters.Builder pluginParameters_Builder0 = PluginParameters.builder();
      PluginParameters.Builder pluginParameters_Builder1 = pluginParameters_Builder0.setSortOrder(")W25+%)0aH2Hbl!", "v");
      assertSame(pluginParameters_Builder1, pluginParameters_Builder0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PluginParameters.Builder pluginParameters_Builder0 = PluginParameters.builder();
      PluginParameters.Builder pluginParameters_Builder1 = pluginParameters_Builder0.setFormatting("\r", true, false);
      assertSame(pluginParameters_Builder0, pluginParameters_Builder1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PluginParameters.Builder pluginParameters_Builder0 = PluginParameters.builder();
      PluginParameters.Builder pluginParameters_Builder1 = pluginParameters_Builder0.setFileOutput(true, "T!QT =Wg^v~", "0[Km6]kvJaS~=kGHo|d");
      assertSame(pluginParameters_Builder0, pluginParameters_Builder1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PluginParameters.Builder pluginParameters_Builder0 = PluginParameters.builder();
      PluginParameters.Builder pluginParameters_Builder1 = pluginParameters_Builder0.setVerifyFail("STOP");
      assertSame(pluginParameters_Builder0, pluginParameters_Builder1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PluginParameters.Builder pluginParameters_Builder0 = PluginParameters.builder();
      PluginParameters.Builder pluginParameters_Builder1 = pluginParameters_Builder0.setIndent(0, true);
      assertSame(pluginParameters_Builder0, pluginParameters_Builder1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PluginParameters.Builder pluginParameters_Builder0 = PluginParameters.builder();
      PluginParameters.Builder pluginParameters_Builder1 = pluginParameters_Builder0.setPomFile((File) null);
      assertSame(pluginParameters_Builder0, pluginParameters_Builder1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PluginParameters.Builder pluginParameters_Builder0 = PluginParameters.builder();
      PluginParameters.Builder pluginParameters_Builder1 = pluginParameters_Builder0.setTriggers(true);
      assertSame(pluginParameters_Builder0, pluginParameters_Builder1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PluginParameters.Builder pluginParameters_Builder0 = PluginParameters.builder();
      PluginParameters.Builder pluginParameters_Builder1 = pluginParameters_Builder0.setSortEntities("", ",1", true, true);
      assertSame(pluginParameters_Builder0, pluginParameters_Builder1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PluginParameters.Builder pluginParameters_Builder0 = PluginParameters.builder();
      PluginParameters pluginParameters0 = pluginParameters_Builder0.build();
      assertFalse(pluginParameters0.ignoreLineSeparators);
      assertFalse(pluginParameters0.indentBlankLines);
      assertFalse(pluginParameters0.sortProperties);
      assertFalse(pluginParameters0.keepBlankLines);
      assertFalse(pluginParameters0.sortModules);
      assertFalse(pluginParameters0.expandEmptyElements);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PluginParameters.Builder pluginParameters_Builder0 = PluginParameters.builder();
      PluginParameters.Builder pluginParameters_Builder1 = pluginParameters_Builder0.setEncoding(",1");
      assertSame(pluginParameters_Builder1, pluginParameters_Builder0);
  }
}
