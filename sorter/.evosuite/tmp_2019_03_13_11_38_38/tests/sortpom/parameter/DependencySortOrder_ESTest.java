/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 13 10:59:47 GMT 2019
 */

package sortpom.parameter;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Collection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sortpom.parameter.DependencySortOrder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DependencySortOrder_ESTest extends DependencySortOrder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DependencySortOrder dependencySortOrder0 = new DependencySortOrder("false");
      boolean boolean0 = dependencySortOrder0.isDeprecatedValueTrue();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DependencySortOrder dependencySortOrder0 = new DependencySortOrder("false");
      boolean boolean0 = dependencySortOrder0.isDeprecatedValueFalse();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DependencySortOrder dependencySortOrder0 = new DependencySortOrder("");
      Collection<String> collection0 = dependencySortOrder0.getChildElementNames();
      assertFalse(dependencySortOrder0.isDeprecatedValueFalse());
      assertFalse(dependencySortOrder0.isDeprecatedValueTrue());
      assertFalse(collection0.contains(""));
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DependencySortOrder dependencySortOrder0 = new DependencySortOrder("true");
      boolean boolean0 = dependencySortOrder0.isDeprecatedValueFalse();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DependencySortOrder dependencySortOrder0 = new DependencySortOrder("true");
      boolean boolean0 = dependencySortOrder0.isDeprecatedValueTrue();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DependencySortOrder dependencySortOrder0 = new DependencySortOrder("true");
      boolean boolean0 = dependencySortOrder0.isNoSorting();
      assertFalse(boolean0);
      
      Collection<String> collection0 = dependencySortOrder0.getChildElementNames();
      assertFalse(collection0.contains("true"));
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DependencySortOrder dependencySortOrder0 = new DependencySortOrder((String) null);
      String string0 = dependencySortOrder0.toString();
      assertFalse(dependencySortOrder0.isDeprecatedValueFalse());
      assertEquals("DependencySortOrder{childElementNames=[]}", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DependencySortOrder dependencySortOrder0 = new DependencySortOrder("false");
      String string0 = dependencySortOrder0.toString();
      assertEquals("DependencySortOrder{childElementNames=[]}", string0);
      
      boolean boolean0 = dependencySortOrder0.isNoSorting();
      assertTrue(boolean0);
      assertTrue(dependencySortOrder0.isDeprecatedValueFalse());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DependencySortOrder dependencySortOrder0 = new DependencySortOrder("N");
      boolean boolean0 = dependencySortOrder0.isNoSorting();
      assertFalse(boolean0);
  }
}
