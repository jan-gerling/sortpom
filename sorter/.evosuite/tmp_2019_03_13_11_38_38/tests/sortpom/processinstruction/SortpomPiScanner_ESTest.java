/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 13 10:56:15 GMT 2019
 */

package sortpom.processinstruction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import sortpom.logger.SortPomLogger;
import sortpom.processinstruction.SortpomPiScanner;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SortpomPiScanner_ESTest extends SortpomPiScanner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SortPomLogger sortPomLogger0 = mock(SortPomLogger.class, new ViolatedAssumptionAnswer());
      SortpomPiScanner sortpomPiScanner0 = new SortpomPiScanner(sortPomLogger0);
      // Undeclared exception!
      try { 
        sortpomPiScanner0.scan((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SortpomPiScanner sortpomPiScanner0 = new SortpomPiScanner((SortPomLogger) null);
      boolean boolean0 = sortpomPiScanner0.isScanError();
      assertFalse(boolean0);
      assertFalse(sortpomPiScanner0.containsIgnoredSections());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SortpomPiScanner sortpomPiScanner0 = new SortpomPiScanner((SortPomLogger) null);
      sortpomPiScanner0.scan("@qu>!*");
      assertFalse(sortpomPiScanner0.containsIgnoredSections());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SortpomPiScanner sortpomPiScanner0 = new SortpomPiScanner((SortPomLogger) null);
      boolean boolean0 = sortpomPiScanner0.containsIgnoredSections();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SortpomPiScanner sortpomPiScanner0 = new SortpomPiScanner((SortPomLogger) null);
      sortpomPiScanner0.getFirstError();
      assertFalse(sortpomPiScanner0.containsIgnoredSections());
  }
}
